prog : stmt*
stmt : decl-stmt | expr-stmt | null-stmt | if-stmt | block-stmt | for-stmt | break-stmt | continue-stmt
null-stmt : ";"
decl-stmt : "int" identifier ("," identifier (= expr)?)* ";"
if-stmt : "if" "(" expr ")" stmt ( "else" stmt )?
for-stmt : "for" "(" expr? ";" expr? ";" expr? ")" stmt
					 "for" "(" decl-stmt expr? ";" expr? ")" stmt
block-stmt: "{" stmt* "}"
break-stmt: "break" ";"
continue-stmt: "continue" ";"
expr-stmt : expr ";"
expr : assign-expr | logor-expr
assign-expr: identifier "=" expr
logor-expr: logand-expr ("||" logand-expr)*
logand-expr: bitor-expr ("&&" bitor-expr)*
bitor-expr: bitxor-expr ("|" bitxor-expr)*
bitxor-expr: bitand-expr ("^" bitand-expr)*
bitand-expr: equal-expr ("&" equal-expr)*
equal-expr : relational-expr (("==" | "!=") relational-expr)*
relational-expr: shift-expr (("<"|">"|"<="|">=") shift-expr)*
shift-expr: add-expr (("<<" | ">>") add-expr)*
add-expr : mult-expr (("+" | "-") mult-expr)* 
mult-expr : primary-expr (("*" | "/" | "%") primary-expr)* 
primary-expr : identifier | number | "(" expr ")" 
number: ([0-9])+ 
identifier : (a-zA-Z_)(a-zA-Z0-9_)*